function Start-DbcPowerBi {
    <#
        .SYNOPSIS
            Launches the included dbachecks Power BI dashboard. **You will need refresh* the Power BI dashboard every time to see the new results.
        
        .DESCRIPTION
            Launches the included dbachecks Power BI dashboard. **You will need refresh* the Power BI dashboard every time to see the new results.
    
        .PARAMETER Path
            The location of the pbix file. "$script:ModuleRoot\bin\dbachecks.pbix" by default.
    
        .PARAMETER EnableException
            By default, when something goes wrong we try to catch it, interpret it and give you a friendly warning message.
            This avoids overwhelming you with "sea of red" exceptions, but is inconvenient because it basically disables advanced scripting.
            Using this switch turns this "nice by default" feature off and enables you to catch exceptions with your own try/catch.
            
        .EXAMPLE
            Start-DbcPowerBi
        
            Launches PowerBi from "$script:ModuleRoot\bin\dbachecks.pbix" using "C:\windows\Temp\dbachecks\*.json" (generated by Update-DbcPowerBiDataSource) as the datasource.

        .EXAMPLE
            Start-DbcPowerBi -Path \\nas\projects\dbachecks.pbix
        
            Launches \\nas\projects\dbachecks.pbix using "C:\windows\Temp\dbachecks\*.json" as the datasource
    
        .EXAMPLE
            Start-DbcPowerBi -Path \\nas\projects\dbachecks.pbix -DataSource "C:\windows\Temp\dbachecks.json"
        
            Launches \\nas\projects\dbachecks.pbix using "C:\windows\Temp\dbachecks.json" as the datasource
    #>
    [CmdletBinding()]
    param (
        [string]$Path = "$script:ModuleRoot\bin\dbachecks.pbix",
        [string]$DataSource = "C:\windows\Temp\dbachecks\*.json",
        [switch]$EnableException
    )
    
    process {
        if (Test-Path -Path $Path -PathType Container) {
            $Path = "$Path\dbachecks.pbix"
            Write-PSFMessage -Level Output -Message "Path passed in, appending file name to it."
            Write-PSFMessage -Level Output -Message "New path: $path"
        }
        if (-not (Test-Path -Path $Path)) {
            Stop-PSFFunction -Message "$Path does not exist"
            return
        }
        
        if ($Path -match "Program Files") {
            $newpath = "$script:localapp\dbachecks.pbix"
            #if ((Test-Path -Path $newpath)) { # Would be nice if we could tell if it needed to be replaced or not
            #I suppose we could use dbachecks versioning and wintemp?
            Copy-Item -Path $Path -Destination $newpath -Force -ErrorAction SilentlyContinue
            $Path = $newpath
        }
        
        try {
			Write-PSFMessage -Level Output -Message "Launching the dbachecks dashboard. This may take a moment."
            Invoke-Item -Path $path
        }
        catch {
            Stop-PSFFunction -Message "Failure" -ErrorRecord $_
            return
        }
    }
}